// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from loader.djinni

#import "MCTileLoaderInterface+Private.h"
#import "MCTileLoaderInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCTextureLoaderResult+Private.h"
#import "MCVectorTileLoaderResult+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCTileLoaderInterfaceCppProxy : NSObject<MCTileLoaderInterface>

- (id)initWithCpp:(const std::shared_ptr<::TileLoaderInterface>&)cppRef;

@end

@implementation MCTileLoaderInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::TileLoaderInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::TileLoaderInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull MCTextureLoaderResult *)loadTexture:(nonnull NSString *)url {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->loadTexture(::djinni::String::toCpp(url));
        return ::djinni_generated::TextureLoaderResult::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MCVectorTileLoaderResult *)loadVectorTile:(nonnull NSString *)url {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->loadVectorTile(::djinni::String::toCpp(url));
        return ::djinni_generated::VectorTileLoaderResult::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class TileLoaderInterface::ObjcProxy final
: public ::TileLoaderInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::TileLoaderInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    ::TextureLoaderResult loadTexture(const std::string & c_url) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() loadTexture:(::djinni::String::fromCpp(c_url))];
            return ::djinni_generated::TextureLoaderResult::toCpp(objcpp_result_);
        }
    }
    ::VectorTileLoaderResult loadVectorTile(const std::string & c_url) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() loadVectorTile:(::djinni::String::fromCpp(c_url))];
            return ::djinni_generated::VectorTileLoaderResult::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto TileLoaderInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCTileLoaderInterfaceCppProxy class]]) {
        return ((MCTileLoaderInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto TileLoaderInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCTileLoaderInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
