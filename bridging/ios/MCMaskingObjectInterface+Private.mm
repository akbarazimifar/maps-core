// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicsobjects.djinni

#import "MCMaskingObjectInterface+Private.h"
#import "MCMaskingObjectInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCRenderPassConfig+Private.h"
#import "MCRenderingContextInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCMaskingObjectInterfaceCppProxy : NSObject<MCMaskingObjectInterface>

- (id)initWithCpp:(const std::shared_ptr<::MaskingObjectInterface>&)cppRef;

@end

@implementation MCMaskingObjectInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::MaskingObjectInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::MaskingObjectInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)renderAsMask:(nullable id<MCRenderingContextInterface>)context
          renderPass:(nonnull MCRenderPassConfig *)renderPass
           mvpMatrix:(int64_t)mvpMatrix {
    try {
        _cppRefHandle.get()->renderAsMask(::djinni_generated::RenderingContextInterface::toCpp(context),
                                          ::djinni_generated::RenderPassConfig::toCpp(renderPass),
                                          ::djinni::I64::toCpp(mvpMatrix));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class MaskingObjectInterface::ObjcProxy final
: public ::MaskingObjectInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::MaskingObjectInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void renderAsMask(const std::shared_ptr<::RenderingContextInterface> & c_context, const ::RenderPassConfig & c_renderPass, int64_t c_mvpMatrix) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() renderAsMask:(::djinni_generated::RenderingContextInterface::fromCpp(c_context))
                                                        renderPass:(::djinni_generated::RenderPassConfig::fromCpp(c_renderPass))
                                                         mvpMatrix:(::djinni::I64::fromCpp(c_mvpMatrix))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto MaskingObjectInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCMaskingObjectInterfaceCppProxy class]]) {
        return ((MCMaskingObjectInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto MaskingObjectInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCMaskingObjectInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
