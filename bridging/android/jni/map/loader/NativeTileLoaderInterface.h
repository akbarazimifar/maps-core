// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from loader.djinni

#pragma once

#include "TileLoaderInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeTileLoaderInterface final : ::djinni::JniInterface<::TileLoaderInterface, NativeTileLoaderInterface> {
public:
    using CppType = std::shared_ptr<::TileLoaderInterface>;
    using CppOptType = std::shared_ptr<::TileLoaderInterface>;
    using JniType = jobject;

    using Boxed = NativeTileLoaderInterface;

    ~NativeTileLoaderInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeTileLoaderInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeTileLoaderInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeTileLoaderInterface();
    friend ::djinni::JniClass<NativeTileLoaderInterface>;
    friend ::djinni::JniInterface<::TileLoaderInterface, NativeTileLoaderInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::TileLoaderInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        ::TextureLoaderResult loadTexture(const std::string & url) override;
        ::VectorTileLoaderResult loadVectorTile(const std::string & url) override;

    private:
        friend ::djinni::JniInterface<::TileLoaderInterface, ::djinni_generated::NativeTileLoaderInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/loader/TileLoaderInterface") };
    const jmethodID method_loadTexture { ::djinni::jniGetMethodID(clazz.get(), "loadTexture", "(Ljava/lang/String;)Lio/openmobilemaps/mapscore/shared/map/loader/TextureLoaderResult;") };
    const jmethodID method_loadVectorTile { ::djinni::jniGetMethodID(clazz.get(), "loadVectorTile", "(Ljava/lang/String;)Lio/openmobilemaps/mapscore/shared/map/loader/VectorTileLoaderResult;") };
};

}  // namespace djinni_generated
