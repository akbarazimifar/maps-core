// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from loader.djinni

#pragma once

#include "VectorTileLoaderResult.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeVectorTileLoaderResult final {
public:
    using CppType = ::VectorTileLoaderResult;
    using JniType = jobject;

    using Boxed = NativeVectorTileLoaderResult;

    ~NativeVectorTileLoaderResult();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeVectorTileLoaderResult();
    friend ::djinni::JniClass<NativeVectorTileLoaderResult>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/loader/VectorTileLoaderResult") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Lio/openmobilemaps/mapscore/shared/map/loader/VectorTileHolderInterface;Lio/openmobilemaps/mapscore/shared/map/loader/LoaderStatus;)V") };
    const jfieldID field_data { ::djinni::jniGetFieldID(clazz.get(), "data", "Lio/openmobilemaps/mapscore/shared/map/loader/VectorTileHolderInterface;") };
    const jfieldID field_status { ::djinni::jniGetFieldID(clazz.get(), "status", "Lio/openmobilemaps/mapscore/shared/map/loader/LoaderStatus;") };
};

}  // namespace djinni_generated
