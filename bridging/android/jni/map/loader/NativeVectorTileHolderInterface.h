// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from loader.djinni

#pragma once

#include "VectorTileHolderInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeVectorTileHolderInterface final : ::djinni::JniInterface<::VectorTileHolderInterface, NativeVectorTileHolderInterface> {
public:
    using CppType = std::shared_ptr<::VectorTileHolderInterface>;
    using CppOptType = std::shared_ptr<::VectorTileHolderInterface>;
    using JniType = jobject;

    using Boxed = NativeVectorTileHolderInterface;

    ~NativeVectorTileHolderInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeVectorTileHolderInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeVectorTileHolderInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeVectorTileHolderInterface();
    friend ::djinni::JniClass<NativeVectorTileHolderInterface>;
    friend ::djinni::JniInterface<::VectorTileHolderInterface, NativeVectorTileHolderInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::VectorTileHolderInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::vector<int8_t> getData() override;

    private:
        friend ::djinni::JniInterface<::VectorTileHolderInterface, ::djinni_generated::NativeVectorTileHolderInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/loader/VectorTileHolderInterface") };
    const jmethodID method_getData { ::djinni::jniGetMethodID(clazz.get(), "getData", "()Ljava/util/ArrayList;") };
};

}  // namespace djinni_generated
